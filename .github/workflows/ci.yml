name: Build Executables

on:
  push:
    paths:
      - 'version.txt'
      - 'build_executable.py'
      - 'madden_franchise_qt/**'
      - 'resources/**'
      - '.github/workflows/ci.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for git tag operations
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get version (Windows)
      if: matrix.os == 'windows-latest'
      id: get_version_win
      shell: pwsh
      run: |
        $version = Get-Content "version.txt" -Raw
        Write-Output "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    
    - name: Get version (macOS)
      if: matrix.os == 'macos-latest'
      id: get_version_mac
      shell: bash
      run: |
        version=$(cat version.txt)
        echo "version=$version" >> $GITHUB_OUTPUT
    
    - name: Check if release exists (Windows)
      if: matrix.os == 'windows-latest'
      id: check_release
      shell: pwsh
      run: |
        $version = Get-Content "version.txt" -Raw
        $tag = "v$version"
        $releases = gh release list --limit 100
        $releaseExists = $releases -match $tag
        if ($releaseExists) {
          Write-Output "release_exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Release $tag already exists"
        } else {
          Write-Output "release_exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "Release $tag does not exist, will create it"
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Verify requirements.txt exists (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (-not (Test-Path "requirements.txt")) {
          Write-Error "requirements.txt not found!"
          exit 1
        }
    
    - name: Verify requirements.txt exists (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        if [ ! -f "requirements.txt" ]; then
          echo "requirements.txt not found!"
          exit 1
        fi
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=5.6.0
        pip install appdirs>=1.4.4
        pip install pillow
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=5.6.0
        pip install appdirs>=1.4.4
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        python build_executable.py
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Build failed!"
          exit 1
        }
    
    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        python build_executable.py
        if [ $? -ne 0 ]; then
          echo "Build failed!"
          exit 1
        fi
    
    - name: Verify build output (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $version = Get-Content "version.txt" -Raw
        $exePath = "builds\$version\windows\Madden Franchise Generator v$version\Madden Franchise Generator v$version.exe"
        if (-not (Test-Path $exePath)) {
          Write-Error "Windows executable not found at: $exePath"
          exit 1
        }
        Write-Host "Found executable at: $exePath"
    
    - name: Verify build output (macOS)
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        version=$(cat version.txt)
        appPath="builds/$version/macos/Madden Franchise Generator v$version.app"
        if [ ! -d "$appPath" ]; then
          echo "macOS app bundle not found at: $appPath"
          exit 1
        fi
        echo "Found app bundle at: $appPath"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executable-${{ matrix.os }}
        path: |
          builds/*/*/*
          builds/_latest/*
    
    - name: Create Git Tag (Windows)
      if: matrix.os == 'windows-latest' && steps.check_release.outputs.release_exists == 'false'
      shell: pwsh
      run: |
        $version = Get-Content "version.txt" -Raw
        $tag = "v$version"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a $tag -m "Release $tag"
        git push origin $tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      if: matrix.os == 'windows-latest' && steps.check_release.outputs.release_exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.get_version_win.outputs.version }}
        files: |
          builds/*/*/*
          builds/_latest/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 